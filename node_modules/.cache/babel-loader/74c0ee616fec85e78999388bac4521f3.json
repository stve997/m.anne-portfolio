{"ast":null,"code":"class Queue {\n  constructor() {\n    this.order = [];\n    this.scheduled = new Set();\n  }\n\n  add(process) {\n    if (!this.scheduled.has(process)) {\n      this.scheduled.add(process);\n      this.order.push(process);\n      return true;\n    }\n  }\n\n  remove(process) {\n    const index = this.order.indexOf(process);\n\n    if (index !== -1) {\n      this.order.splice(index, 1);\n      this.scheduled.delete(process);\n    }\n  }\n\n  clear() {\n    this.order.length = 0;\n    this.scheduled.clear();\n  }\n\n}\n\nfunction createRenderStep(runNextFrame) {\n  /**\n   * We create and reuse two queues, one to queue jobs for the current frame\n   * and one for the next. We reuse to avoid triggering GC after x frames.\n   */\n  let thisFrame = new Queue();\n  let nextFrame = new Queue();\n  let numToRun = 0;\n  /**\n   * Track whether we're currently processing jobs in this step. This way\n   * we can decide whether to schedule new jobs for this frame or next.\n   */\n\n  let isProcessing = false;\n  let flushNextFrame = false;\n  /**\n   * A set of processes which were marked keepAlive when scheduled.\n   */\n\n  const toKeepAlive = new WeakSet();\n  const step = {\n    /**\n     * Schedule a process to run on the next frame.\n     */\n    schedule: function (callback) {\n      let keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      const addToCurrentFrame = immediate && isProcessing;\n      const queue = addToCurrentFrame ? thisFrame : nextFrame;\n      if (keepAlive) toKeepAlive.add(callback);\n\n      if (queue.add(callback) && addToCurrentFrame && isProcessing) {\n        // If we're adding it to the currently running queue, update its measured size\n        numToRun = thisFrame.order.length;\n      }\n\n      return callback;\n    },\n\n    /**\n     * Cancel the provided callback from running on the next frame.\n     */\n    cancel: callback => {\n      nextFrame.remove(callback);\n      toKeepAlive.delete(callback);\n    },\n\n    /**\n     * Execute all schedule callbacks.\n     */\n    process: frameData => {\n      /**\n       * If we're already processing we've probably been triggered by a flushSync\n       * inside an existing process. Instead of executing, mark flushNextFrame\n       * as true and ensure we flush the following frame at the end of this one.\n       */\n      if (isProcessing) {\n        flushNextFrame = true;\n        return;\n      }\n\n      isProcessing = true;\n      [thisFrame, nextFrame] = [nextFrame, thisFrame]; // Clear the next frame queue\n\n      nextFrame.clear(); // Execute this frame\n\n      numToRun = thisFrame.order.length;\n\n      if (numToRun) {\n        for (let i = 0; i < numToRun; i++) {\n          const callback = thisFrame.order[i];\n          callback(frameData);\n\n          if (toKeepAlive.has(callback)) {\n            step.schedule(callback);\n            runNextFrame();\n          }\n        }\n      }\n\n      isProcessing = false;\n\n      if (flushNextFrame) {\n        flushNextFrame = false;\n        step.process(frameData);\n      }\n    }\n  };\n  return step;\n}\n\nexport { createRenderStep };","map":{"version":3,"names":["Queue","constructor","order","scheduled","Set","add","process","has","push","remove","index","indexOf","splice","delete","clear","length","createRenderStep","runNextFrame","thisFrame","nextFrame","numToRun","isProcessing","flushNextFrame","toKeepAlive","WeakSet","step","schedule","callback","keepAlive","immediate","addToCurrentFrame","queue","cancel","frameData","i"],"sources":["/home/steve/web-dev-projects/m.anne-portfolio/node_modules/framer-motion/dist/es/frameloop/render-step.mjs"],"sourcesContent":["class Queue {\n    constructor() {\n        this.order = [];\n        this.scheduled = new Set();\n    }\n    add(process) {\n        if (!this.scheduled.has(process)) {\n            this.scheduled.add(process);\n            this.order.push(process);\n            return true;\n        }\n    }\n    remove(process) {\n        const index = this.order.indexOf(process);\n        if (index !== -1) {\n            this.order.splice(index, 1);\n            this.scheduled.delete(process);\n        }\n    }\n    clear() {\n        this.order.length = 0;\n        this.scheduled.clear();\n    }\n}\nfunction createRenderStep(runNextFrame) {\n    /**\n     * We create and reuse two queues, one to queue jobs for the current frame\n     * and one for the next. We reuse to avoid triggering GC after x frames.\n     */\n    let thisFrame = new Queue();\n    let nextFrame = new Queue();\n    let numToRun = 0;\n    /**\n     * Track whether we're currently processing jobs in this step. This way\n     * we can decide whether to schedule new jobs for this frame or next.\n     */\n    let isProcessing = false;\n    let flushNextFrame = false;\n    /**\n     * A set of processes which were marked keepAlive when scheduled.\n     */\n    const toKeepAlive = new WeakSet();\n    const step = {\n        /**\n         * Schedule a process to run on the next frame.\n         */\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const queue = addToCurrentFrame ? thisFrame : nextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (queue.add(callback) && addToCurrentFrame && isProcessing) {\n                // If we're adding it to the currently running queue, update its measured size\n                numToRun = thisFrame.order.length;\n            }\n            return callback;\n        },\n        /**\n         * Cancel the provided callback from running on the next frame.\n         */\n        cancel: (callback) => {\n            nextFrame.remove(callback);\n            toKeepAlive.delete(callback);\n        },\n        /**\n         * Execute all schedule callbacks.\n         */\n        process: (frameData) => {\n            /**\n             * If we're already processing we've probably been triggered by a flushSync\n             * inside an existing process. Instead of executing, mark flushNextFrame\n             * as true and ensure we flush the following frame at the end of this one.\n             */\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [thisFrame, nextFrame] = [nextFrame, thisFrame];\n            // Clear the next frame queue\n            nextFrame.clear();\n            // Execute this frame\n            numToRun = thisFrame.order.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = thisFrame.order[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}