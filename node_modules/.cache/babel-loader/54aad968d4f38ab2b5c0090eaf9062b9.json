{"ast":null,"code":"import { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { memo } from '../../../utils/memo.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { frameData, frame, cancelFrame } from '../../../frameloop/frame.mjs';\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */\n\nconst acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\", \"backgroundColor\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\n\nconst sampleDelta = 10; //ms\n\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\n\nconst maxDuration = 20000;\n\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" || valueName === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\n\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  let {\n    onUpdate,\n    onComplete,\n    ...options\n  } = _ref;\n  const canAccelerateAnimation = supportsWaapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0 && options.type !== \"inertia\";\n  if (!canAccelerateAnimation) return false;\n  /**\n   * TODO: Unify with js/index\n   */\n\n  let hasStopped = false;\n  let resolveFinishedPromise;\n  let currentFinishedPromise;\n  /**\n   * Resolve the current Promise every time we enter the\n   * finished state. This is WAAPI-compatible behaviour.\n   */\n\n  const updateFinishedPromise = () => {\n    currentFinishedPromise = new Promise(resolve => {\n      resolveFinishedPromise = resolve;\n    });\n  }; // Create the first finished promise\n\n\n  updateFinishedPromise();\n  let {\n    keyframes,\n    duration = 300,\n    ease,\n    times\n  } = options;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n\n  if (requiresPregeneratedKeyframes(valueName, options)) {\n    const sampleAnimation = animateValue({ ...options,\n      repeat: 0,\n      delay: 0\n    });\n    let state = {\n      done: false,\n      value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n\n    let t = 0;\n\n    while (!state.done && t < maxDuration) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n\n    times = undefined;\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n\n  const animation = animateStyle(value.owner.current, valueName, keyframes, { ...options,\n    duration,\n\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease,\n    times\n  });\n  /**\n   * WAAPI animations don't resolve startTime synchronously. But a blocked\n   * thread could delay the startTime resolution by a noticeable amount.\n   * For synching handoff animations with the new Motion animation we want\n   * to ensure startTime is synchronously set.\n   */\n\n  if (options.syncStart) {\n    animation.startTime = frameData.isProcessing ? frameData.timestamp : document.timeline ? document.timeline.currentTime : performance.now();\n  }\n\n  const cancelAnimation = () => animation.cancel();\n\n  const safeCancel = () => {\n    frame.update(cancelAnimation);\n    resolveFinishedPromise();\n    updateFinishedPromise();\n  };\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n\n\n  animation.onfinish = () => {\n    value.set(getFinalKeyframe(keyframes, options));\n    onComplete && onComplete();\n    safeCancel();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n\n\n  const controls = {\n    then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n\n    attachTimeline(timeline) {\n      animation.timeline = timeline;\n      animation.onfinish = null;\n      return noop;\n    },\n\n    get time() {\n      return millisecondsToSeconds(animation.currentTime || 0);\n    },\n\n    set time(newTime) {\n      animation.currentTime = secondsToMilliseconds(newTime);\n    },\n\n    get speed() {\n      return animation.playbackRate;\n    },\n\n    set speed(newSpeed) {\n      animation.playbackRate = newSpeed;\n    },\n\n    get duration() {\n      return millisecondsToSeconds(duration);\n    },\n\n    play: () => {\n      if (hasStopped) return;\n      animation.play();\n      /**\n       * Cancel any pending cancel tasks\n       */\n\n      cancelFrame(cancelAnimation);\n    },\n    pause: () => animation.pause(),\n    stop: () => {\n      hasStopped = true;\n      if (animation.playState === \"idle\") return;\n      /**\n       * WAAPI doesn't natively have any interruption capabilities.\n       *\n       * Rather than read commited styles back out of the DOM, we can\n       * create a renderless JS animation and sample it twice to calculate\n       * its current value, \"previous\" value, and therefore allow\n       * Motion to calculate velocity for any subsequent animation.\n       */\n\n      const {\n        currentTime\n      } = animation;\n\n      if (currentTime) {\n        const sampleAnimation = animateValue({ ...options,\n          autoplay: false\n        });\n        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n\n      safeCancel();\n    },\n    complete: () => animation.finish(),\n    cancel: safeCancel\n  };\n  return controls;\n}\n\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["animateStyle","isWaapiSupportedEasing","getFinalKeyframe","animateValue","millisecondsToSeconds","secondsToMilliseconds","memo","noop","frameData","frame","cancelFrame","supportsWaapi","Object","hasOwnProperty","call","Element","prototype","acceleratedValues","Set","sampleDelta","maxDuration","requiresPregeneratedKeyframes","valueName","options","type","ease","createAcceleratedAnimation","value","onUpdate","onComplete","canAccelerateAnimation","has","repeatDelay","repeatType","damping","hasStopped","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","keyframes","duration","times","sampleAnimation","repeat","delay","state","done","pregeneratedKeyframes","t","sample","push","undefined","animation","owner","current","syncStart","startTime","isProcessing","timestamp","document","timeline","currentTime","performance","now","cancelAnimation","cancel","safeCancel","update","onfinish","set","controls","then","reject","attachTimeline","time","newTime","speed","playbackRate","newSpeed","play","pause","stop","playState","autoplay","setWithVelocity","complete","finish"],"sources":["/home/steve/web-dev-projects/m.anne-portfolio/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { memo } from '../../../utils/memo.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { frameData, frame, cancelFrame } from '../../../frameloop/frame.mjs';\n\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supportsWaapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0 &&\n        options.type !== \"inertia\";\n    if (!canAccelerateAnimation)\n        return false;\n    /**\n     * TODO: Unify with js/index\n     */\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let { keyframes, duration = 300, ease, times } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            delay: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < maxDuration) {\n            state = sampleAnimation.sample(t);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        times = undefined;\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n        times,\n    });\n    /**\n     * WAAPI animations don't resolve startTime synchronously. But a blocked\n     * thread could delay the startTime resolution by a noticeable amount.\n     * For synching handoff animations with the new Motion animation we want\n     * to ensure startTime is synchronously set.\n     */\n    if (options.syncStart) {\n        animation.startTime = frameData.isProcessing\n            ? frameData.timestamp\n            : document.timeline\n                ? document.timeline.currentTime\n                : performance.now();\n    }\n    const cancelAnimation = () => animation.cancel();\n    const safeCancel = () => {\n        frame.update(cancelAnimation);\n        resolveFinishedPromise();\n        updateFinishedPromise();\n    };\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        onComplete && onComplete();\n        safeCancel();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        attachTimeline(timeline) {\n            animation.timeline = timeline;\n            animation.onfinish = null;\n            return noop;\n        },\n        get time() {\n            return millisecondsToSeconds(animation.currentTime || 0);\n        },\n        set time(newTime) {\n            animation.currentTime = secondsToMilliseconds(newTime);\n        },\n        get speed() {\n            return animation.playbackRate;\n        },\n        set speed(newSpeed) {\n            animation.playbackRate = newSpeed;\n        },\n        get duration() {\n            return millisecondsToSeconds(duration);\n        },\n        play: () => {\n            if (hasStopped)\n                return;\n            animation.play();\n            /**\n             * Cancel any pending cancel tasks\n             */\n            cancelFrame(cancelAnimation);\n        },\n        pause: () => animation.pause(),\n        stop: () => {\n            hasStopped = true;\n            if (animation.playState === \"idle\")\n                return;\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            safeCancel();\n        },\n        complete: () => animation.finish(),\n        cancel: safeCancel,\n    };\n    return controls;\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}